{"ast":null,"code":"var _jsxFileName = \"/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport HistoryPanel from \"./containers/HistoryPanel/HistoryPanel\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCmdObj\";\nimport AddShapeCmdObj from \"./shared/commandObjects/AddShapeCmdObj\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      currCommand: -1,\n      undoAllowed: false,\n      redoAllowed: false\n    };\n\n    this.registerExecution = commandObject => {\n      this.setState({\n        commandList: [...this.state.commandList, commandObject],\n        currCommand: this.state.currCommand + 1\n      });\n    };\n\n    this.undo = () => {\n      console.log(\"undo\");\n\n      if (this.state.currCommand - 1 === -1) {\n        this.setState({\n          undoAllowed: false\n        });\n      }\n\n      if (this.state.currCommand !== -1) {\n        this.setState({\n          selectedShapeId: this.state.commandList[this.state.currCommand].selectedShapeId\n        });\n        this.state.commandList[this.state.currCommand].undo(); //var oldValue = this.state.commandList[this.state.currCommand].oldValue;\n        //this.updateShape(this.state.commandList[this.state.currCommand].selectedShapeId, { oldValue });\n\n        this.setState({\n          currCommand: this.state.currCommand - 1,\n          redoAllowed: true\n        });\n      }\n    };\n\n    this.redo = () => {\n      console.log(\"redo\");\n\n      if (this.state.currCommand + 1 === this.state.commandList.length - 1) {\n        this.setState({\n          redoAllowed: false,\n          undoAllowed: true\n        });\n      }\n\n      this.state.commandList[this.state.currCommand + 1].redo();\n      this.setState({\n        currCommand: this.state.currCommand + 1\n      });\n    };\n\n    this.addShape = shapeData => {\n      let shapes = [...this.state.shapes];\n      let shapesMap = { ...this.state.shapesMap\n      };\n      const id = genId();\n      shapesMap[id] = { ...shapeData,\n        id\n      };\n      shapes.push(id);\n      this.setState({\n        shapes,\n        shapesMap,\n        selectedShapeId: id,\n        undoAllowed: true\n      });\n      let cmdObj = new AddShapeCmdObj(this.undoHandler, shapeData, id);\n      cmdObj.execute();\n    };\n\n    this.updateShape = (shapeId, newData) => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = { ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n    };\n\n    this.moveShape = newData => {\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, newData);\n      }\n    };\n\n    this.deleteSelectedShape = () => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[this.state.selectedShapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n\n    this.changeCurrBorderColor = borderColor => {\n      let cmdObj = new ChangeBorderColorCommandObject(this.undoHandler, this.state.shapesMap[this.state.selectedShapeId], this.state.selectedShapeId, this.state.currBorderColor, borderColor);\n      this.setState({\n        currBorderColor: borderColor\n      });\n\n      if (this.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderColor\n        });\n      }\n    };\n\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n\n    this.changeCurrFillColor = fillColor => {\n      let cmdObj = new ChangeFillColorCommandObject(this.undoHandler, this.state.shapesMap[this.state.selectedShapeId], this.state.selectedShapeId, this.state.currFillColor, fillColor);\n      cmdObj.execute();\n      this.setState({\n        currFillColor: fillColor\n      });\n\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          fillColor\n        });\n      }\n    };\n\n    this.unAddShape = shapeId => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[shapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n\n    this.reAddShape = shapeId => {\n      let shapesMap = { ...this.state.shapesMap\n      };\n      shapesMap[shapeId].visible = true;\n      this.setState({\n        shapesMap,\n        selectedShapeId: shapeId\n      });\n    };\n\n    this.setPaletteValues = values => {\n      this.setState({\n        currMode: values.mode,\n        currBorderColor: values.borderColor,\n        currBorderWidth: values.borderWidth,\n        currFillColor: values.fillColor\n      });\n    };\n\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      unAddShape: this.unAddShape,\n      reAddShape: this.reAddShape,\n      setPaletteValues: this.setPaletteValues // TODO: fill this up with whatever you need for the command objects\n\n    };\n  }\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n      undoAllowed,\n      redoAllowed\n    } = this.state; // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo,\n        undoAllowed,\n        redoAllowed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(HistoryPanel, {\n      commandListObjs: this.state.commandList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/App.js"],"names":["React","Component","ControlPanel","Workspace","HistoryPanel","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","ChangeBorderColorCommandObject","AddShapeCmdObj","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","currFillColor","fillColor","shapes","shapesMap","selectedShapeId","undefined","commandList","currCommand","undoAllowed","redoAllowed","registerExecution","commandObject","setState","undo","console","log","redo","length","addShape","shapeData","id","push","cmdObj","undoHandler","execute","updateShape","shapeId","newData","targetShape","moveShape","deleteSelectedShape","visible","changeCurrMode","changeCurrBorderColor","changeCurrBorderWidth","changeCurrFillColor","unAddShape","reAddShape","setPaletteValues","values","render","selectShape","filter"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport HistoryPanel from \"./containers/HistoryPanel/HistoryPanel\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderColorCommandObject from \"./shared/commandObjects/ChangeBorderColorCmdObj\";\nimport AddShapeCmdObj from \"./shared/commandObjects/AddShapeCmdObj\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    currCommand: -1,\n    undoAllowed: false,\n    redoAllowed: false\n  };\n\n  constructor() {\n    super();\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      unAddShape: this.unAddShape,\n      reAddShape: this.reAddShape,\n      setPaletteValues: this.setPaletteValues\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n    this.setState({\n      commandList: [...this.state.commandList, commandObject],\n      currCommand: this.state.currCommand + 1\n    });\n  };\n\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    console.log(\"undo\");\n    if (this.state.currCommand-1 === -1){\n      this.setState({\n        undoAllowed: false\n      }); \n    }\n\n    if(this.state.currCommand !== -1){\n      this.setState({\n        selectedShapeId: this.state.commandList[this.state.currCommand].selectedShapeId\n      });        \n      this.state.commandList[this.state.currCommand].undo();\n      //var oldValue = this.state.commandList[this.state.currCommand].oldValue;\n      //this.updateShape(this.state.commandList[this.state.currCommand].selectedShapeId, { oldValue });\n      this.setState({\n        currCommand: this.state.currCommand - 1,\n        redoAllowed: true\n      });  \n    }\n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    console.log(\"redo\"); \n    if (this.state.currCommand+1 === this.state.commandList.length-1){\n      this.setState({\n        redoAllowed: false,\n        undoAllowed: true\n      }); \n    }\n    this.state.commandList[this.state.currCommand+1].redo();\n    this.setState({\n      currCommand: this.state.currCommand + 1,\n    }); \n  };\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    let shapes = [...this.state.shapes];\n    let shapesMap = { ...this.state.shapesMap };\n    const id = genId();\n    shapesMap[id] = {\n      ...shapeData,\n      id,\n    };\n    shapes.push(id);\n    this.setState({ shapes, shapesMap, selectedShapeId: id, undoAllowed: true });\n\n    let cmdObj = new AddShapeCmdObj(\n      this.undoHandler,\n      shapeData, \n      id,\n    );\n    cmdObj.execute();\n\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n  };\n\n  moveShape = (newData) => {\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, newData);\n    }\n  };\n\n  // deleting a shape sets its visibility to false, rather than removing it\n  deleteSelectedShape = () => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[this.state.selectedShapeId].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n  };\n\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  changeCurrBorderColor = (borderColor) => {\n    let cmdObj = new ChangeBorderColorCommandObject(\n      this.undoHandler,\n      this.state.shapesMap[this.state.selectedShapeId], \n      this.state.selectedShapeId,\n      this.state.currBorderColor, \n      borderColor\n    );\n    this.setState({ currBorderColor: borderColor });\n    if (this.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderColor });\n    }\n  };\n\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  changeCurrFillColor = (fillColor) => {\n    let cmdObj = new ChangeFillColorCommandObject(\n      this.undoHandler,\n      this.state.shapesMap[this.state.selectedShapeId], \n      this.state.selectedShapeId,\n      this.state.currFillColor, \n      fillColor\n    );\n    cmdObj.execute();\n    this.setState({ currFillColor: fillColor });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { fillColor });\n    }\n  };\n\n  // For Undo Redo\n  unAddShape = (shapeId) => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[shapeId].visible = false;\n    this.setState({shapesMap, selectedShapeId: undefined});   \n  }\n\n  reAddShape = (shapeId) => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[shapeId].visible = true;\n    this.setState({shapesMap, selectedShapeId: shapeId});   \n  }\n\n  setPaletteValues = (values) => {\n    this.setState({\n      currMode: values.mode,\n      currBorderColor: values.borderColor,\n      currBorderWidth: values.borderWidth,\n      currFillColor: values.fillColor\n    });\n  }\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n      undoAllowed,\n      redoAllowed\n    } = this.state;\n\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n            undoAllowed,\n            redoAllowed\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n          <HistoryPanel commandListObjs = {this.state.commandList}/>\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}