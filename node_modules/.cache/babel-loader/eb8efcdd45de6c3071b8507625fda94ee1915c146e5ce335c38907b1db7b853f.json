{"ast":null,"code":"var _jsxFileName = \"/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/App.js\";\nimport React, { Component } from \"react\";\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport HistoryPanel from \"./containers/HistoryPanel/HistoryPanel\";\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderColorCmdObj from \"./shared/commandObjects/ChangeBorderColorCmdObj\";\nimport ChangeBorderWidthCmdObj from \"./shared/commandObjects/ChangeBorderWidthCmdObj\";\nimport AddShapeCmdObj from \"./shared/commandObjects/AddShapeCmdObj\";\nimport DeleteCmdObj from \"./shared/commandObjects/DeleteCmdObj\";\nimport MoveCmdObj from \"./shared/commandObjects/MoveCmdObj\";\nimport \"./App.css\";\nclass App extends Component {\n  constructor() {\n    super();\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.state = {\n      // controls\n      currMode: defaultValues.mode,\n      currBorderColor: defaultValues.borderColor,\n      currBorderWidth: defaultValues.borderWidth,\n      currFillColor: defaultValues.fillColor,\n      // workspace\n      shapes: [],\n      shapesMap: {},\n      selectedShapeId: undefined,\n      // handling undo/redo\n      commandList: [],\n      currCommand: -1,\n      undoAllowed: false,\n      redoAllowed: false\n    };\n    /*\n     * TODO:\n     * add the commandObj to the commandList so\n     * that is available for undoing.\n     */\n    this.registerExecution = commandObject => {\n      let newCmdList = [];\n      if (this.state.commandList.length !== this.state.currCommand + 1) {\n        newCmdList = this.state.commandList.slice(0, this.state.currCommand + 1);\n      } else {\n        newCmdList = [...this.state.commandList];\n      }\n      this.setState({\n        commandList: [...newCmdList, commandObject],\n        currCommand: this.state.currCommand + 1\n      });\n    };\n    /*\n     * TODO:\n     * actually call the undo method of the command at\n     * the current position in the undo stack\n     */\n    this.undo = () => {\n      //console.log(\"undo\");\n      if (this.state.currCommand - 1 === -1) {\n        this.setState({\n          undoAllowed: false\n        });\n      }\n      if (this.state.currCommand !== -1) {\n        this.setState({\n          selectedShapeId: this.state.commandList[this.state.currCommand].selectedShapeId\n        });\n        this.state.commandList[this.state.currCommand].undo();\n        //var oldValue = this.state.commandList[this.state.currCommand].oldValue;\n        //this.updateShape(this.state.commandList[this.state.currCommand].selectedShapeId, { oldValue });\n        this.setState({\n          currCommand: this.state.currCommand - 1,\n          redoAllowed: true\n        });\n      }\n    };\n    /*\n     * TODO:\n     * actually call the redo method of the command at\n     * the current position in the undo stack. Note that this is\n     * NOT the same command as would be affected by a doUndo()\n     */\n    this.redo = () => {\n      //console.log(\"redo\"); \n      if (this.state.currCommand + 1 === this.state.commandList.length - 1) {\n        this.setState({\n          redoAllowed: false,\n          undoAllowed: true\n        });\n      }\n      if (this.state.currCommand + 1 < this.state.commandList.length) {\n        this.state.commandList[this.state.currCommand + 1].redo();\n        this.setState({\n          currCommand: this.state.currCommand + 1\n        });\n      }\n    };\n    // add the shapeId to the array, and the shape itself to the map\n    this.addShape = shapeData => {\n      let shapes = [...this.state.shapes];\n      let shapesMap = {\n        ...this.state.shapesMap\n      };\n      const id = genId();\n      shapesMap[id] = {\n        ...shapeData,\n        id\n      };\n      shapes.push(id);\n      this.setState({\n        shapes,\n        shapesMap,\n        selectedShapeId: id,\n        undoAllowed: true\n      });\n      let cmdObj = new AddShapeCmdObj(this.undoHandler, shapeData, id);\n      cmdObj.execute();\n    };\n    // get the shape by its id, and update its properties\n    this.updateShape = (shapeId, newData) => {\n      let shapesMap = {\n        ...this.state.shapesMap\n      };\n      let targetShape = shapesMap[shapeId];\n      shapesMap[shapeId] = {\n        ...targetShape,\n        ...newData\n      };\n      this.setState({\n        shapesMap\n      });\n    };\n    this.moveShape = newData => {\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, newData);\n      }\n    };\n    // deleting a shape sets its visibility to false, rather than removing it\n    this.deleteSelectedShape = () => {\n      let shapesMap = {\n        ...this.state.shapesMap\n      };\n      shapesMap[this.state.selectedShapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n      let cmdObj = new DeleteCmdObj(this.undoHandler, shapesMap[this.state.selectedShapeId], this.state.selectedShapeId);\n      cmdObj.execute();\n    };\n    this.changeCurrMode = mode => {\n      if (mode === \"line\") {\n        this.setState({\n          currMode: mode,\n          currBorderColor: defaultValues.borderColor\n        });\n      } else {\n        this.setState({\n          currMode: mode\n        });\n      }\n    };\n    this.changeCurrBorderColor = borderColor => {\n      this.setState({\n        currBorderColor: borderColor\n      });\n      if (this.state.selectedShapeId) {\n        let cmdObj = new ChangeBorderColorCmdObj(this.undoHandler, this.state.shapesMap[this.state.selectedShapeId], this.state.selectedShapeId, this.state.currBorderColor, borderColor);\n        cmdObj.execute();\n        this.updateShape(this.state.selectedShapeId, {\n          borderColor\n        });\n      }\n    };\n    this.changeCurrBorderWidth = borderWidth => {\n      this.setState({\n        currBorderWidth: borderWidth\n      });\n      if (this.state.selectedShapeId) {\n        this.updateShape(this.state.selectedShapeId, {\n          borderWidth\n        });\n      }\n    };\n    this.AddChangeBorderWidthCmd = (borderWidth, oldWidth) => {\n      let cmdObj = new ChangeBorderWidthCmdObj(this.undoHandler, this.state.shapesMap[this.state.selectedShapeId], this.state.selectedShapeId, oldWidth, borderWidth);\n      cmdObj.execute();\n    };\n    this.changeCurrFillColor = fillColor => {\n      this.setState({\n        currFillColor: fillColor\n      });\n      if (this.state.selectedShapeId) {\n        let cmdObj = new ChangeFillColorCommandObject(this.undoHandler, this.state.shapesMap[this.state.selectedShapeId], this.state.selectedShapeId, this.state.currFillColor, fillColor);\n        cmdObj.execute();\n        this.updateShape(this.state.selectedShapeId, {\n          fillColor\n        });\n      }\n    };\n    // For Undo Redo\n    this.unAddShape = shapeId => {\n      let shapesMap = {\n        ...this.state.shapesMap\n      };\n      shapesMap[shapeId].visible = false;\n      this.setState({\n        shapesMap,\n        selectedShapeId: undefined\n      });\n    };\n    this.reAddShape = shapeId => {\n      let shapesMap = {\n        ...this.state.shapesMap\n      };\n      shapesMap[shapeId].visible = true;\n      this.setState({\n        shapesMap,\n        selectedShapeId: shapeId\n      });\n    };\n    this.setPaletteValues = values => {\n      this.setState({\n        currMode: values.mode,\n        currBorderColor: values.borderColor,\n        currBorderWidth: values.borderWidth,\n        currFillColor: values.fillColor\n      });\n    };\n    this.addMoveCmdObj = (oldValue, newValue) => {\n      let cmdObj = new MoveCmdObj(this.undoHandler, this.state.shapesMap[this.state.selectedShapeId], this.state.selectedShapeId, oldValue, newValue);\n      cmdObj.execute();\n    };\n    this.keyDownHandler = e => {\n      var evtobj = window.event ? window.event : e;\n      if (evtobj.keyCode == 90 && evtobj.metaKey && evtobj.shiftKey) this.redo();else if (evtobj.keyCode == 90 && (evtobj.ctrlKey || evtobj.metaKey)) this.undo();\n      if (evtobj.keyCode == 89 && evtobj.ctrlKey) this.redo();\n    };\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      unAddShape: this.unAddShape,\n      reAddShape: this.reAddShape,\n      setPaletteValues: this.setPaletteValues\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n      undoAllowed,\n      redoAllowed\n    } = this.state;\n    window.addEventListener(\"keydown\", this.keyDownHandler, true);\n    //window.addEventListener(\"keyUp\", this.keyUpHandler, true);\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ControlContext.Provider, {\n      value: {\n        currMode,\n        changeCurrMode: this.changeCurrMode,\n        currBorderColor,\n        changeCurrBorderColor: this.changeCurrBorderColor,\n        currBorderWidth,\n        changeCurrBorderWidth: this.changeCurrBorderWidth,\n        AddChangeBorderWidthCmd: this.AddChangeBorderWidthCmd,\n        currFillColor,\n        changeCurrFillColor: this.changeCurrFillColor,\n        addMoveCmdObj: this.addMoveCmdObj,\n        shapes,\n        shapesMap,\n        addShape: this.addShape,\n        moveShape: this.moveShape,\n        selectedShapeId,\n        selectShape: id => {\n          this.setState({\n            selectedShapeId: id\n          });\n          if (id) {\n            const {\n              borderColor,\n              borderWidth,\n              fillColor\n            } = shapesMap[shapes.filter(shapeId => shapeId === id)[0]];\n            this.setState({\n              currBorderColor: borderColor,\n              currBorderWidth: borderWidth,\n              currFillColor: fillColor\n            });\n          }\n        },\n        deleteSelectedShape: this.deleteSelectedShape,\n        undo: this.undo,\n        redo: this.redo,\n        undoAllowed,\n        redoAllowed\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ControlPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Workspace, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(HistoryPanel, {\n      commandListObjs: this.state.commandList,\n      currCmdIndex: this.state.currCommand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }\n    })));\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ControlPanel","Workspace","HistoryPanel","ControlContext","genId","defaultValues","ChangeFillColorCommandObject","ChangeBorderColorCmdObj","ChangeBorderWidthCmdObj","AddShapeCmdObj","DeleteCmdObj","MoveCmdObj","App","constructor","state","currMode","mode","currBorderColor","borderColor","currBorderWidth","borderWidth","currFillColor","fillColor","shapes","shapesMap","selectedShapeId","undefined","commandList","currCommand","undoAllowed","redoAllowed","registerExecution","commandObject","newCmdList","length","slice","setState","undo","redo","addShape","shapeData","id","push","cmdObj","undoHandler","execute","updateShape","shapeId","newData","targetShape","moveShape","deleteSelectedShape","visible","changeCurrMode","changeCurrBorderColor","changeCurrBorderWidth","AddChangeBorderWidthCmd","oldWidth","changeCurrFillColor","unAddShape","reAddShape","setPaletteValues","values","addMoveCmdObj","oldValue","newValue","keyDownHandler","e","evtobj","window","event","keyCode","metaKey","shiftKey","ctrlKey","render","addEventListener","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","selectShape","filter","commandListObjs","currCmdIndex"],"sources":["/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\n\nimport ControlPanel from \"./containers/ControlPanel/ControlPanel\";\nimport Workspace from \"./containers/Workspace/Workspace\";\nimport HistoryPanel from \"./containers/HistoryPanel/HistoryPanel\";\n\nimport ControlContext from \"./contexts/control-context\";\nimport { genId, defaultValues } from \"./shared/util\";\nimport ChangeFillColorCommandObject from \"./shared/commandObjects/ChangeFillColorCommandObject\";\nimport ChangeBorderColorCmdObj from \"./shared/commandObjects/ChangeBorderColorCmdObj\";\nimport ChangeBorderWidthCmdObj from \"./shared/commandObjects/ChangeBorderWidthCmdObj\";\nimport AddShapeCmdObj from \"./shared/commandObjects/AddShapeCmdObj\";\nimport DeleteCmdObj from \"./shared/commandObjects/DeleteCmdObj\";\nimport MoveCmdObj from \"./shared/commandObjects/MoveCmdObj\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state = {\n    // controls\n    currMode: defaultValues.mode,\n    currBorderColor: defaultValues.borderColor,\n    currBorderWidth: defaultValues.borderWidth,\n    currFillColor: defaultValues.fillColor,\n\n    // workspace\n    shapes: [],\n    shapesMap: {},\n    selectedShapeId: undefined,\n\n    // handling undo/redo\n    commandList: [],\n    currCommand: -1,\n    undoAllowed: false,\n    redoAllowed: false,\n  };\n\n  constructor() {\n    super();\n\n    /*\n     * pass this undoHandler into command object constructors:\n     *  e.g. let cmdObj = new ChangeFillColorCommandObject(this.undoHandler);\n     */\n    this.undoHandler = {\n      registerExecution: this.registerExecution,\n      updateShape: this.updateShape,\n      unAddShape: this.unAddShape,\n      reAddShape: this.reAddShape,\n      setPaletteValues: this.setPaletteValues\n      // TODO: fill this up with whatever you need for the command objects\n    };\n  }\n\n  /*\n   * TODO:\n   * add the commandObj to the commandList so\n   * that is available for undoing.\n   */\n  registerExecution = (commandObject) => {\n    let newCmdList = [];\n    if (this.state.commandList.length !== this.state.currCommand+1) {\n      newCmdList = this.state.commandList.slice(0, this.state.currCommand+1 )\n    }\n    else{\n      newCmdList = [...this.state.commandList];\n    }\n    this.setState({\n      commandList: [...newCmdList, commandObject],\n      currCommand: this.state.currCommand + 1\n    });\n  };\n\n  /*\n   * TODO:\n   * actually call the undo method of the command at\n   * the current position in the undo stack\n   */\n  undo = () => {\n    //console.log(\"undo\");\n    if (this.state.currCommand-1 === -1){\n      this.setState({\n        undoAllowed: false\n      }); \n    }\n\n    if(this.state.currCommand !== -1){\n      this.setState({\n        selectedShapeId: this.state.commandList[this.state.currCommand].selectedShapeId\n      });        \n      this.state.commandList[this.state.currCommand].undo();\n      //var oldValue = this.state.commandList[this.state.currCommand].oldValue;\n      //this.updateShape(this.state.commandList[this.state.currCommand].selectedShapeId, { oldValue });\n      this.setState({\n        currCommand: this.state.currCommand - 1,\n        redoAllowed: true\n      });  \n    }\n  };\n\n  /*\n   * TODO:\n   * actually call the redo method of the command at\n   * the current position in the undo stack. Note that this is\n   * NOT the same command as would be affected by a doUndo()\n   */\n  redo = () => {\n    //console.log(\"redo\"); \n    if (this.state.currCommand+1 === this.state.commandList.length-1){\n      this.setState({\n        redoAllowed: false,\n        undoAllowed: true\n      }); \n    }\n\n    if(this.state.currCommand+1 < this.state.commandList.length) {\n      this.state.commandList[this.state.currCommand+1].redo();\n      this.setState({\n        currCommand: this.state.currCommand + 1,\n      });       \n    } \n  };\n\n  // add the shapeId to the array, and the shape itself to the map\n  addShape = (shapeData) => {\n    let shapes = [...this.state.shapes];\n    let shapesMap = { ...this.state.shapesMap };\n    const id = genId();\n    shapesMap[id] = {\n      ...shapeData,\n      id,\n    };\n    shapes.push(id);\n    this.setState({ shapes, shapesMap, selectedShapeId: id, undoAllowed: true });\n\n    let cmdObj = new AddShapeCmdObj(\n      this.undoHandler,\n      shapeData, \n      id,\n    );\n    cmdObj.execute();\n\n  };\n\n  // get the shape by its id, and update its properties\n  updateShape = (shapeId, newData) => {\n    let shapesMap = { ...this.state.shapesMap };\n    let targetShape = shapesMap[shapeId];\n    shapesMap[shapeId] = { ...targetShape, ...newData };\n    this.setState({ shapesMap });\n  };\n\n  moveShape = (newData) => {\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, newData);\n    }\n  };\n\n  // deleting a shape sets its visibility to false, rather than removing it\n  deleteSelectedShape = () => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[this.state.selectedShapeId].visible = false;\n    this.setState({ shapesMap, selectedShapeId: undefined });\n\n    let cmdObj = new DeleteCmdObj(\n      this.undoHandler,\n      shapesMap[this.state.selectedShapeId], \n      this.state.selectedShapeId,\n    );\n    cmdObj.execute();\n  };\n\n  changeCurrMode = (mode) => {\n    if (mode === \"line\") {\n      this.setState({\n        currMode: mode,\n        currBorderColor: defaultValues.borderColor,\n      });\n    } else {\n      this.setState({ currMode: mode });\n    }\n  };\n\n  changeCurrBorderColor = (borderColor) => {\n    this.setState({ currBorderColor: borderColor });\n    if (this.state.selectedShapeId) {\n      let cmdObj = new ChangeBorderColorCmdObj(\n        this.undoHandler,\n        this.state.shapesMap[this.state.selectedShapeId], \n        this.state.selectedShapeId,\n        this.state.currBorderColor, \n        borderColor\n      );\n      cmdObj.execute();\n      this.updateShape(this.state.selectedShapeId, { borderColor });\n    }\n  };\n\n  changeCurrBorderWidth = (borderWidth) => {\n    this.setState({ currBorderWidth: borderWidth });\n    if (this.state.selectedShapeId) {\n      this.updateShape(this.state.selectedShapeId, { borderWidth });\n    }\n  };\n\n  AddChangeBorderWidthCmd = (borderWidth, oldWidth) => {\n    let cmdObj = new ChangeBorderWidthCmdObj(\n      this.undoHandler,\n      this.state.shapesMap[this.state.selectedShapeId], \n      this.state.selectedShapeId,\n      oldWidth, \n      borderWidth\n    );\n    cmdObj.execute();  \n  }\n\n  changeCurrFillColor = (fillColor) => {\n    \n    this.setState({ currFillColor: fillColor });\n    if (this.state.selectedShapeId) {\n      let cmdObj = new ChangeFillColorCommandObject(\n        this.undoHandler,\n        this.state.shapesMap[this.state.selectedShapeId], \n        this.state.selectedShapeId,\n        this.state.currFillColor, \n        fillColor\n      );\n      cmdObj.execute();\n      this.updateShape(this.state.selectedShapeId, { fillColor });\n    }\n  };\n\n  // For Undo Redo\n  unAddShape = (shapeId) => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[shapeId].visible = false;\n    this.setState({shapesMap, selectedShapeId: undefined});   \n  }\n\n  reAddShape = (shapeId) => {\n    let shapesMap = { ...this.state.shapesMap };\n    shapesMap[shapeId].visible = true;\n    this.setState({shapesMap, selectedShapeId: shapeId});   \n  }\n\n  setPaletteValues = (values) => {\n    this.setState({\n      currMode: values.mode,\n      currBorderColor: values.borderColor,\n      currBorderWidth: values.borderWidth,\n      currFillColor: values.fillColor\n    });\n  }\n\n  addMoveCmdObj = (oldValue, newValue) => {\n    let cmdObj = new MoveCmdObj(\n      this.undoHandler,\n      this.state.shapesMap[this.state.selectedShapeId], \n      this.state.selectedShapeId,\n      oldValue, \n      newValue\n    );\n    cmdObj.execute();\n  }\n\n  keyDownHandler = (e) => {\n    var evtobj = window.event? window.event : e;\n    if (evtobj.keyCode == 90 && evtobj.metaKey && evtobj.shiftKey) this.redo();\n    else if (evtobj.keyCode == 90 && (evtobj.ctrlKey || evtobj.metaKey)) this.undo();\n    if (evtobj.keyCode == 89 && evtobj.ctrlKey ) this.redo();\n  }\n\n\n  render() {\n    const {\n      currMode,\n      currBorderColor,\n      currBorderWidth,\n      currFillColor,\n      shapes,\n      shapesMap,\n      selectedShapeId,\n      undoAllowed,\n      redoAllowed\n    } = this.state;\n\n    window.addEventListener(\"keydown\", this.keyDownHandler, true);\n    //window.addEventListener(\"keyUp\", this.keyUpHandler, true);\n    // update the context with the functions and values defined above and from state\n    // and pass it to the structure below it (control panel and workspace)\n    return (\n      <React.Fragment>\n        <ControlContext.Provider\n          value={{\n            currMode,\n            changeCurrMode: this.changeCurrMode,\n            currBorderColor,\n            changeCurrBorderColor: this.changeCurrBorderColor,\n            currBorderWidth,\n            changeCurrBorderWidth: this.changeCurrBorderWidth,\n            AddChangeBorderWidthCmd: this.AddChangeBorderWidthCmd,\n            currFillColor,\n            changeCurrFillColor: this.changeCurrFillColor,\n            addMoveCmdObj: this.addMoveCmdObj,\n            shapes,\n            shapesMap,\n            addShape: this.addShape,\n            moveShape: this.moveShape,\n            selectedShapeId,\n            selectShape: (id) => {\n              this.setState({ selectedShapeId: id });\n              if (id) {\n                const { borderColor, borderWidth, fillColor } = shapesMap[\n                  shapes.filter((shapeId) => shapeId === id)[0]\n                ];\n                this.setState({\n                  currBorderColor: borderColor,\n                  currBorderWidth: borderWidth,\n                  currFillColor: fillColor,\n                });\n              }\n            },\n            deleteSelectedShape: this.deleteSelectedShape,\n\n            undo: this.undo,\n            redo: this.redo,\n            undoAllowed,\n            redoAllowed\n          }}\n        >\n          <ControlPanel />\n          <Workspace />\n          <HistoryPanel commandListObjs = {this.state.commandList} currCmdIndex = {this.state.currCommand}/>\n        </ControlContext.Provider>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}