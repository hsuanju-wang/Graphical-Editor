{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nlet selectedObj;\nexport default class AddShapeCmdObj extends CommandObject {\n  constructor(undoHandler, newSelectedObj, selectedShapeId) {\n    super(undoHandler, true);\n    this.commandName = \"Create \" + newSelectedObj.type;\n    console.log(this.commandName);\n\n    if (newSelectedObj !== null) {\n      this.targetObject = newSelectedObj; // global variable for selected\n\n      this.selectedShapeId = selectedShapeId;\n      this.isUndo = false;\n    } //selectedShapeId = newSelectedShapeId;\n\n\n    selectedObj = newSelectedObj;\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    // Note that this command object must be a NEW command object so it can be\n    // registered to put it onto the stack\n    if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    this.isUndo = true;\n    this.undoHandler.unAddShape(this.selectedShapeId); // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    this.isUndo = false;\n    this.undoHandler.reAddShape(this.selectedShapeId); // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {\n    return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // get new selected obj\n\n      this.oldValue = selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n\n      selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/shared/commandObjects/AddShapeCmdObj.js"],"names":["CommandObject","selectedObj","AddShapeCmdObj","constructor","undoHandler","newSelectedObj","selectedShapeId","commandName","type","console","log","targetObject","isUndo","execute","addToUndoStack","registerExecution","undo","unAddShape","redo","reAddShape","canRepeat","repeat","oldValue","fillColor","newValue"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,IAAIC,WAAJ;AAEA,eAAe,MAAMC,cAAN,SAA6BF,aAA7B,CAA2C;AACxDG,EAAAA,WAAW,CAACC,WAAD,EAAcC,cAAd,EAA8BC,eAA9B,EAA+C;AACxD,UAAMF,WAAN,EAAmB,IAAnB;AACA,SAAKG,WAAL,GAAmB,YAAaF,cAAc,CAACG,IAA/C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,WAAjB;;AACA,QAAIF,cAAc,KAAK,IAAvB,EAA6B;AAC3B,WAAKM,YAAL,GAAoBN,cAApB,CAD2B,CACS;;AACpC,WAAKC,eAAL,GAAuBA,eAAvB;AACA,WAAKM,MAAL,GAAc,KAAd;AACD,KARuD,CASxD;;;AACAX,IAAAA,WAAW,GAAGI,cAAd;AACD;AAED;;;;;;AAIAQ,EAAAA,OAAO,GAAG;AACR;AACA;AACA,QAAI,KAAKC,cAAT,EAAyB,KAAKV,WAAL,CAAiBW,iBAAjB,CAAmC,IAAnC;AAC1B;AAED;;;;AAEAC,EAAAA,IAAI,GAAG;AACL,SAAKJ,MAAL,GAAc,IAAd;AACA,SAAKR,WAAL,CAAiBa,UAAjB,CAA4B,KAAKX,eAAjC,EAFK,CAGL;AACD;AAED;;;;;;;AAKAY,EAAAA,IAAI,GAAG;AACL,SAAKN,MAAL,GAAc,KAAd;AACA,SAAKR,WAAL,CAAiBe,UAAjB,CAA4B,KAAKb,eAAjC,EAFK,CAGL;AACD;AAED;;;;;AAGAc,EAAAA,SAAS,GAAG;AACV,WAAOnB,WAAW,KAAK,IAAvB;AACD;AAED;;;;;;AAIAoB,EAAAA,MAAM,GAAG;AACP,QAAIpB,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAKU,YAAL,GAAoBV,WAApB,CADwB,CACS;;AACjC,WAAKqB,QAAL,GAAgBrB,WAAW,CAACsB,SAA5B,CAFwB,CAEe;AACvC;;AACAtB,MAAAA,WAAW,CAACsB,SAAZ,GAAwB,KAAKC,QAA7B,CAJwB,CAIe;AAEvC;AACA;;AACA,UAAI,KAAKV,cAAT,EAAyB,KAAKV,WAAL,CAAiBW,iBAAjB,CAAmC,EAAE,GAAG;AAAL,OAAnC;AAC1B;AACF;;AAjEuD","sourcesContent":["import CommandObject from \"./CommandObject\";\nlet selectedObj;\n\nexport default class AddShapeCmdObj extends CommandObject {\n  constructor(undoHandler, newSelectedObj, selectedShapeId) {\n    super(undoHandler, true);\n    this.commandName = \"Create \" +  newSelectedObj.type;\n    console.log(this.commandName);\n    if (newSelectedObj !== null) {\n      this.targetObject = newSelectedObj; // global variable for selected\n      this.selectedShapeId = selectedShapeId;\n      this.isUndo = false;\n    }\n    //selectedShapeId = newSelectedShapeId;\n    selectedObj = newSelectedObj;\n  }\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute() {\n    // Note that this command object must be a NEW command object so it can be\n    // registered to put it onto the stack\n    if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n  }\n\n  /* override to undo the operation of this command\n   */\n  undo() {\n    this.isUndo = true;\n    this.undoHandler.unAddShape(this.selectedShapeId);\n    // maybe also need to fix the palette to show this object's color?\n  }\n\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n  redo() {\n    this.isUndo = false;\n    this.undoHandler.reAddShape(this.selectedShapeId);\n    // maybe also need to fix the palette to show this object's color?\n  }\n\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n  canRepeat() {\n    return selectedObj !== null;\n  }\n\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n  repeat() {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // get new selected obj\n      this.oldValue = selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n      selectedObj.fillColor = this.newValue; // actually change\n\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}