{"ast":null,"code":"/*\n * top level definition of what Command Objects\n * should be like. This is basically an abstract class that particular\n * command objects should extend\n */\nexport default class CommandObject {\n  constructor(controls, addToUndoStack = true) {\n    this.commandName = \"\";\n    this.undoHandler = controls;\n    this.addToUndoStack = addToUndoStack; // is this the kind of operations that is queued?\n\n    this.targetObject = undefined; // object this command affected\n\n    this.newValue = undefined; // new value used by the command\n\n    this.oldValue = undefined; // previous (old) value for the object\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {}\n  /* override to undo the operation of this command.\n   * this should be a NEW command object so it can be put on the undo stack.\n   * execute will only be called if addToUndoStack was true, so it must\n   * be an undoable operation. Be sure to register this\n   * object on the undo stack.\n   */\n\n\n  undo() {}\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {}\n  /* override to return true if this operation can be repeated in the\n   * current context. NOTE: Repeat is extra credit.\n   */\n\n\n  canRepeat() {\n    return false;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * targetObject. Be sure to register this\n   * object on the undo stack.  NOTE: Repeat is extra credit.\n   */\n\n\n  repeat() {}\n\n}","map":{"version":3,"sources":["/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/shared/commandObjects/CommandObject.js"],"names":["CommandObject","constructor","controls","addToUndoStack","commandName","undoHandler","targetObject","undefined","newValue","oldValue","execute","undo","redo","canRepeat","repeat"],"mappings":"AAAA;;;;;AAKA,eAAe,MAAMA,aAAN,CAAoB;AACjCC,EAAAA,WAAW,CAACC,QAAD,EAAWC,cAAc,GAAG,IAA5B,EAAkC;AAC3C,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,WAAL,GAAmBH,QAAnB;AACA,SAAKC,cAAL,GAAsBA,cAAtB,CAH2C,CAGL;;AACtC,SAAKG,YAAL,GAAoBC,SAApB,CAJ2C,CAIZ;;AAC/B,SAAKC,QAAL,GAAgBD,SAAhB,CAL2C,CAKhB;;AAC3B,SAAKE,QAAL,GAAgBF,SAAhB,CAN2C,CAMhB;AAC5B;AAED;;;;;;AAIAG,EAAAA,OAAO,GAAG,CAAE;AAEZ;;;;;;;;AAMAC,EAAAA,IAAI,GAAG,CAAE;AAET;;;;;;;AAKAC,EAAAA,IAAI,GAAG,CAAE;AAET;;;;;AAGAC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAP;AACD;AAED;;;;;;;AAKAC,EAAAA,MAAM,GAAG,CAAE;;AA3CsB","sourcesContent":["/*\n * top level definition of what Command Objects\n * should be like. This is basically an abstract class that particular\n * command objects should extend\n */\nexport default class CommandObject {\n  constructor(controls, addToUndoStack = true) {\n    this.commandName = \"\";\n    this.undoHandler = controls;\n    this.addToUndoStack = addToUndoStack; // is this the kind of operations that is queued?\n    this.targetObject = undefined; // object this command affected\n    this.newValue = undefined; // new value used by the command\n    this.oldValue = undefined; // previous (old) value for the object\n  }\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute() {}\n\n  /* override to undo the operation of this command.\n   * this should be a NEW command object so it can be put on the undo stack.\n   * execute will only be called if addToUndoStack was true, so it must\n   * be an undoable operation. Be sure to register this\n   * object on the undo stack.\n   */\n  undo() {}\n\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n  redo() {}\n\n  /* override to return true if this operation can be repeated in the\n   * current context. NOTE: Repeat is extra credit.\n   */\n  canRepeat() {\n    return false;\n  }\n\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * targetObject. Be sure to register this\n   * object on the undo stack.  NOTE: Repeat is extra credit.\n   */\n  repeat() {}\n}\n"]},"metadata":{},"sourceType":"module"}