{"ast":null,"code":"/*\n * top level definition of what Command Objects\n * should be like. This is basically an abstract class that particular\n * command objects should extend\n */\nexport default class CommandObject {\n  constructor(controls) {\n    let addToUndoStack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.commandName = \"\";\n    this.undoHandler = controls;\n    this.addToUndoStack = addToUndoStack; // is this the kind of operations that is queued?\n    this.targetObject = undefined; // object this command affected\n    this.newValue = undefined; // new value used by the command\n    this.oldValue = undefined; // previous (old) value for the object\n    this.isUndo = undefined;\n  }\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute() {}\n\n  /* override to undo the operation of this command.\n   * this should be a NEW command object so it can be put on the undo stack.\n   * execute will only be called if addToUndoStack was true, so it must\n   * be an undoable operation. Be sure to register this\n   * object on the undo stack.\n   */\n  undo() {}\n\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n  redo() {}\n\n  /* override to return true if this operation can be repeated in the\n   * current context. NOTE: Repeat is extra credit.\n   */\n  canRepeat() {\n    return false;\n  }\n\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * targetObject. Be sure to register this\n   * object on the undo stack.  NOTE: Repeat is extra credit.\n   */\n  repeat() {}\n}","map":{"version":3,"names":["CommandObject","constructor","controls","addToUndoStack","arguments","length","undefined","commandName","undoHandler","targetObject","newValue","oldValue","isUndo","execute","undo","redo","canRepeat","repeat"],"sources":["/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/shared/commandObjects/CommandObject.js"],"sourcesContent":["/*\n * top level definition of what Command Objects\n * should be like. This is basically an abstract class that particular\n * command objects should extend\n */\nexport default class CommandObject {\n  constructor(controls, addToUndoStack = true) {\n    this.commandName = \"\";\n    this.undoHandler = controls;\n    this.addToUndoStack = addToUndoStack; // is this the kind of operations that is queued?\n    this.targetObject = undefined; // object this command affected\n    this.newValue = undefined; // new value used by the command\n    this.oldValue = undefined; // previous (old) value for the object\n    this.isUndo = undefined;\n  }\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute() {}\n\n  /* override to undo the operation of this command.\n   * this should be a NEW command object so it can be put on the undo stack.\n   * execute will only be called if addToUndoStack was true, so it must\n   * be an undoable operation. Be sure to register this\n   * object on the undo stack.\n   */\n  undo() {}\n\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n  redo() {}\n\n  /* override to return true if this operation can be repeated in the\n   * current context. NOTE: Repeat is extra credit.\n   */\n  canRepeat() {\n    return false;\n  }\n\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * targetObject. Be sure to register this\n   * object on the undo stack.  NOTE: Repeat is extra credit.\n   */\n  repeat() {}\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMA,aAAa,CAAC;EACjCC,WAAWA,CAACC,QAAQ,EAAyB;IAAA,IAAvBC,cAAc,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACzC,IAAI,CAACG,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,WAAW,GAAGN,QAAQ;IAC3B,IAAI,CAACC,cAAc,GAAGA,cAAc,CAAC,CAAC;IACtC,IAAI,CAACM,YAAY,GAAGH,SAAS,CAAC,CAAC;IAC/B,IAAI,CAACI,QAAQ,GAAGJ,SAAS,CAAC,CAAC;IAC3B,IAAI,CAACK,QAAQ,GAAGL,SAAS,CAAC,CAAC;IAC3B,IAAI,CAACM,MAAM,GAAGN,SAAS;EACzB;;EAEA;AACF;AACA;AACA;EACEO,OAAOA,CAAA,EAAG,CAAC;;EAEX;AACF;AACA;AACA;AACA;AACA;EACEC,IAAIA,CAAA,EAAG,CAAC;;EAER;AACF;AACA;AACA;AACA;EACEC,IAAIA,CAAA,EAAG,CAAC;;EAER;AACF;AACA;EACEC,SAASA,CAAA,EAAG;IACV,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEC,MAAMA,CAAA,EAAG,CAAC;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}