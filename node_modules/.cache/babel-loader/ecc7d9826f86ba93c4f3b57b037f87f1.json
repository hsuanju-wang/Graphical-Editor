{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nexport default class MoveCmdObj extends CommandObject {\n  constructor(undoHandler, newSelectedObj, newSelectedShapeId, oldPos, newPos) {\n    super(undoHandler, true);\n    this.commandName = \"Move \" + newSelectedObj.type;\n    console.log(this.commandName);\n\n    if (newSelectedObj !== null) {\n      this.targetObject = newSelectedObj;\n      this.oldValue = oldPos;\n      this.newValue = newPos;\n      this.selectedShapeId = newSelectedShapeId;\n      this.isUndo = false;\n    } //selectedShapeId = newSelectedShapeId;\n    //selectedObj = newSelectedObj;\n\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {\n    // Note that this command object must be a NEW command object so it can be\n    // registered to put it onto the stack\n    if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    this.isUndo = true;\n    this.undoHandler.updateShape(this.selectedShapeId, this.oldValue);\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    this.isUndo = false;\n    this.undoHandler.updateShape(this.selectedShapeId, this.newValue);\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {// return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {//   if (selectedObj !== null) {\n    //     this.targetObject = selectedObj; // get new selected obj\n    //     this.oldValue = selectedObj.fillColor; // object's current color\n    //     // no change to newValue since reusing the same color\n    //     selectedObj.fillColor = this.newValue; // actually change\n    //     // Note that this command object must be a NEW command object so it can be\n    //     // registered to put it onto the stack\n    //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    //   }\n  }\n\n}","map":{"version":3,"sources":["/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/shared/commandObjects/MoveCmdObj.js"],"names":["CommandObject","MoveCmdObj","constructor","undoHandler","newSelectedObj","newSelectedShapeId","oldPos","newPos","commandName","type","console","log","targetObject","oldValue","newValue","selectedShapeId","isUndo","execute","addToUndoStack","registerExecution","undo","updateShape","redo","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAEA,eAAe,MAAMC,UAAN,SAAyBD,aAAzB,CAAuC;AACpDE,EAAAA,WAAW,CAACC,WAAD,EAAcC,cAAd,EAA8BC,kBAA9B,EAAkDC,MAAlD,EAA0DC,MAA1D,EAAkE;AAC3E,UAAMJ,WAAN,EAAmB,IAAnB;AACA,SAAKK,WAAL,GAAmB,UAAWJ,cAAc,CAACK,IAA7C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,WAAjB;;AACA,QAAIJ,cAAc,KAAK,IAAvB,EAA6B;AAC3B,WAAKQ,YAAL,GAAoBR,cAApB;AACA,WAAKS,QAAL,GAAgBP,MAAhB;AACA,WAAKQ,QAAL,GAAgBP,MAAhB;AACA,WAAKQ,eAAL,GAAuBV,kBAAvB;AACA,WAAKW,MAAL,GAAc,KAAd;AACD,KAV0E,CAW3E;AACA;;AACD;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAG;AACR;AACA;AACA,QAAI,KAAKC,cAAT,EAAyB,KAAKf,WAAL,CAAiBgB,iBAAjB,CAAmC,IAAnC;AAC1B;AAED;;;;AAEAC,EAAAA,IAAI,GAAG;AACL,SAAKJ,MAAL,GAAc,IAAd;AACA,SAAKb,WAAL,CAAiBkB,WAAjB,CAA6B,KAAKN,eAAlC,EAAmD,KAAKF,QAAxD;AACD;AAED;;;;;;;AAKAS,EAAAA,IAAI,GAAG;AACL,SAAKN,MAAL,GAAc,KAAd;AACA,SAAKb,WAAL,CAAiBkB,WAAjB,CAA6B,KAAKN,eAAlC,EAAmD,KAAKD,QAAxD;AACD;AAED;;;;;AAGAS,EAAAA,SAAS,GAAG,CACV;AACD;AAED;;;;;;AAIAC,EAAAA,MAAM,GAAG,CACT;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACC;;AAjEmD","sourcesContent":["import CommandObject from \"./CommandObject\";\n\nexport default class MoveCmdObj extends CommandObject {\n  constructor(undoHandler, newSelectedObj, newSelectedShapeId, oldPos, newPos) {\n    super(undoHandler, true);\n    this.commandName = \"Move \" +  newSelectedObj.type;\n    console.log(this.commandName);\n    if (newSelectedObj !== null) {\n      this.targetObject = newSelectedObj; \n      this.oldValue = oldPos; \n      this.newValue = newPos; \n      this.selectedShapeId = newSelectedShapeId;\n      this.isUndo = false;\n    }\n    //selectedShapeId = newSelectedShapeId;\n    //selectedObj = newSelectedObj;\n  }\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute() {\n    // Note that this command object must be a NEW command object so it can be\n    // registered to put it onto the stack\n    if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n  }\n\n  /* override to undo the operation of this command\n   */\n  undo() {\n    this.isUndo = true;\n    this.undoHandler.updateShape(this.selectedShapeId, this.oldValue);\n  }\n\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n  redo() {\n    this.isUndo = false;\n    this.undoHandler.updateShape(this.selectedShapeId, this.newValue);\n  }\n\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n  canRepeat() {\n    // return selectedObj !== null;\n  }\n\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n  repeat() {\n  //   if (selectedObj !== null) {\n  //     this.targetObject = selectedObj; // get new selected obj\n  //     this.oldValue = selectedObj.fillColor; // object's current color\n  //     // no change to newValue since reusing the same color\n  //     selectedObj.fillColor = this.newValue; // actually change\n\n  //     // Note that this command object must be a NEW command object so it can be\n  //     // registered to put it onto the stack\n  //     if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n  //   }\n  }\n}"]},"metadata":{},"sourceType":"module"}