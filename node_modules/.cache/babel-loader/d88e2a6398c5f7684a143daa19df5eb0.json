{"ast":null,"code":"import CommandObject from \"./CommandObject\";\nlet selectedObj;\nlet selectedShapeId;\nexport default class ChangeFillColorCommandObject extends CommandObject {\n  constructor(undoHandler, newSelectedObj, newSelectedShapeId, oldColor, newFillColor) {\n    super(undoHandler, true);\n\n    if (newSelectedObj !== null) {\n      this.targetObject = newSelectedObj; // global variable for selected\n\n      this.oldValue = oldColor; // object's current color\n\n      this.newValue = newFillColor; // get the color widget's current color\n      //selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n\n    selectedShapeId = newSelectedShapeId;\n    selectedObj = newSelectedObj;\n  }\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n\n\n  execute() {// if (selectedObj !== null) {\n    //   this.targetObject = selectedObj; // global variable for selected\n    //   this.oldValue = selectedObj.fillColor; // object's current color\n    //   this.newValue = fillColor; // get the color widget's current color\n    //   selectedObj.fillColor = this.newValue; // actually change\n    //   // Note that this command object must be a NEW command object so it can be\n    //   // registered to put it onto the stack\n    //   if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    // }\n  }\n  /* override to undo the operation of this command\n   */\n\n\n  undo() {\n    console.log(this); //this.undoHandler.updateShape(selectedShapeId, {fillColor: this.oldValue});\n\n    this.targetObject.fillColor = this.oldValue; // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n\n\n  redo() {\n    this.targetObject.fillColor = this.newValue; // maybe also need to fix the palette to show this object's color?\n  }\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n\n\n  canRepeat() {\n    return selectedObj !== null;\n  }\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n\n\n  repeat() {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // get new selected obj\n\n      this.oldValue = selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n\n      selectedObj.fillColor = this.newValue; // actually change\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/phoebe0506/github-classroom/CMU-SSUI-Fall2022/hw5-hsuanjuw/src/shared/commandObjects/ChangeFillColorCommandObject.js"],"names":["CommandObject","selectedObj","selectedShapeId","ChangeFillColorCommandObject","constructor","undoHandler","newSelectedObj","newSelectedShapeId","oldColor","newFillColor","targetObject","oldValue","newValue","addToUndoStack","registerExecution","execute","undo","console","log","fillColor","redo","canRepeat","repeat"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,IAAIC,WAAJ;AACA,IAAIC,eAAJ;AAEA,eAAe,MAAMC,4BAAN,SAA2CH,aAA3C,CAAyD;AACtEI,EAAAA,WAAW,CAACC,WAAD,EAAcC,cAAd,EAA6BC,kBAA7B,EAAiDC,QAAjD,EAA2DC,YAA3D,EAAyE;AAClF,UAAMJ,WAAN,EAAmB,IAAnB;;AAEA,QAAIC,cAAc,KAAK,IAAvB,EAA6B;AAC3B,WAAKI,YAAL,GAAoBJ,cAApB,CAD2B,CACS;;AACpC,WAAKK,QAAL,GAAgBH,QAAhB,CAF2B,CAED;;AAC1B,WAAKI,QAAL,GAAgBH,YAAhB,CAH2B,CAGG;AAC9B;AAEA;AACA;;AACA,UAAI,KAAKI,cAAT,EAAyB,KAAKR,WAAL,CAAiBS,iBAAjB,CAAmC,IAAnC;AAC1B;;AACDZ,IAAAA,eAAe,GAAGK,kBAAlB;AACAN,IAAAA,WAAW,GAAGK,cAAd;AACD;AAED;;;;;;AAIAS,EAAAA,OAAO,GAAG,CACR;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD;AAED;;;;AAEAC,EAAAA,IAAI,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EADK,CAEL;;AACA,SAAKR,YAAL,CAAkBS,SAAlB,GAA8B,KAAKR,QAAnC,CAHK,CAIL;AACD;AAED;;;;;;;AAKAS,EAAAA,IAAI,GAAG;AACL,SAAKV,YAAL,CAAkBS,SAAlB,GAA8B,KAAKP,QAAnC,CADK,CAEL;AACD;AAED;;;;;AAGAS,EAAAA,SAAS,GAAG;AACV,WAAOpB,WAAW,KAAK,IAAvB;AACD;AAED;;;;;;AAIAqB,EAAAA,MAAM,GAAG;AACP,QAAIrB,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAKS,YAAL,GAAoBT,WAApB,CADwB,CACS;;AACjC,WAAKU,QAAL,GAAgBV,WAAW,CAACkB,SAA5B,CAFwB,CAEe;AACvC;;AACAlB,MAAAA,WAAW,CAACkB,SAAZ,GAAwB,KAAKP,QAA7B,CAJwB,CAIe;AAEvC;AACA;;AACA,UAAI,KAAKC,cAAT,EAAyB,KAAKR,WAAL,CAAiBS,iBAAjB,CAAmC,EAAE,GAAG;AAAL,OAAnC;AAC1B;AACF;;AA7EqE","sourcesContent":["import CommandObject from \"./CommandObject\";\nlet selectedObj;\nlet selectedShapeId;\n\nexport default class ChangeFillColorCommandObject extends CommandObject {\n  constructor(undoHandler, newSelectedObj,newSelectedShapeId, oldColor, newFillColor) {\n    super(undoHandler, true);\n\n    if (newSelectedObj !== null) {\n      this.targetObject = newSelectedObj; // global variable for selected\n      this.oldValue = oldColor; // object's current color\n      this.newValue = newFillColor; // get the color widget's current color\n      //selectedObj.fillColor = this.newValue; // actually change\n\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n      if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    }\n    selectedShapeId = newSelectedShapeId;\n    selectedObj = newSelectedObj;\n  }\n\n  /* override to execute the action of this command.\n   * pass in false for addToUndoStack if this is a command which is NOT\n   * put on the undo stack, like Copy, or a change of selection or Save\n   */\n  execute() {\n    // if (selectedObj !== null) {\n    \n    //   this.targetObject = selectedObj; // global variable for selected\n    //   this.oldValue = selectedObj.fillColor; // object's current color\n    //   this.newValue = fillColor; // get the color widget's current color\n    //   selectedObj.fillColor = this.newValue; // actually change\n\n    //   // Note that this command object must be a NEW command object so it can be\n    //   // registered to put it onto the stack\n    //   if (this.addToUndoStack) this.undoHandler.registerExecution(this);\n    // }\n  }\n\n  /* override to undo the operation of this command\n   */\n  undo() {\n    console.log(this);\n    //this.undoHandler.updateShape(selectedShapeId, {fillColor: this.oldValue});\n    this.targetObject.fillColor = this.oldValue;\n    // maybe also need to fix the palette to show this object's color?\n  }\n\n  /* override to redo the operation of this command, which means to\n   * undo the undo. This should ONLY be called if the immediate\n   * previous operation was an Undo of this command. Anything that\n   * can be undone can be redone, so there is no need for a canRedo.\n   */\n  redo() {\n    this.targetObject.fillColor = this.newValue;\n    // maybe also need to fix the palette to show this object's color?\n  }\n\n  /* override to return true if this operation can be repeated in the\n   * current context\n   */\n  canRepeat() {\n    return selectedObj !== null;\n  }\n\n  /* override to execute the operation again, this time possibly on\n   * a new object. Thus, this typically uses the same value but a new\n   * selectedObject.\n   */\n  repeat() {\n    if (selectedObj !== null) {\n      this.targetObject = selectedObj; // get new selected obj\n      this.oldValue = selectedObj.fillColor; // object's current color\n      // no change to newValue since reusing the same color\n      selectedObj.fillColor = this.newValue; // actually change\n\n      // Note that this command object must be a NEW command object so it can be\n      // registered to put it onto the stack\n      if (this.addToUndoStack) this.undoHandler.registerExecution({ ...this });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}